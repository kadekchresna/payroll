// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_interface_test

import (
	"context"

	"github.com/kadekchresna/payroll/internal/v1/auth/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserRepository creates a new instance of MockIUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserRepository {
	mock := &MockIUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserRepository is an autogenerated mock type for the IUserRepository type
type MockIUserRepository struct {
	mock.Mock
}

type MockIUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserRepository) EXPECT() *MockIUserRepository_Expecter {
	return &MockIUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) Create(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockIUserRepository_Expecter) Create(ctx interface{}, user interface{}) *MockIUserRepository_Create_Call {
	return &MockIUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockIUserRepository_Create_Call) Run(run func(ctx context.Context, user *model.User)) *MockIUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_Create_Call) Return(err error) *MockIUserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockIUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) GetByUsername(ctx context.Context, username string) (*model.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockIUserRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockIUserRepository_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockIUserRepository_GetByUsername_Call {
	return &MockIUserRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockIUserRepository_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockIUserRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_GetByUsername_Call) Return(user *model.User, err error) *MockIUserRepository_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserRepository_GetByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*model.User, error)) *MockIUserRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}
