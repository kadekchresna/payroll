// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase_interface_test

import (
	"context"

	"github.com/kadekchresna/payroll/internal/v1/auth/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserUsecase creates a new instance of MockIUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserUsecase {
	mock := &MockIUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserUsecase is an autogenerated mock type for the IUserUsecase type
type MockIUserUsecase struct {
	mock.Mock
}

type MockIUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserUsecase) EXPECT() *MockIUserUsecase_Expecter {
	return &MockIUserUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) Create(ctx context.Context, req dto.CreateUserRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateUserRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIUserUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.CreateUserRequest
func (_e *MockIUserUsecase_Expecter) Create(ctx interface{}, req interface{}) *MockIUserUsecase_Create_Call {
	return &MockIUserUsecase_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockIUserUsecase_Create_Call) Run(run func(ctx context.Context, req dto.CreateUserRequest)) *MockIUserUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.CreateUserRequest
		if args[1] != nil {
			arg1 = args[1].(dto.CreateUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_Create_Call) Return(err error) *MockIUserUsecase_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserUsecase_Create_Call) RunAndReturn(run func(ctx context.Context, req dto.CreateUserRequest) error) *MockIUserUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) Login(ctx context.Context, req dto.LoginUserRequest) (*dto.LoginUserResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.LoginUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginUserRequest) (*dto.LoginUserResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginUserRequest) *dto.LoginUserResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.LoginUserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIUserUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.LoginUserRequest
func (_e *MockIUserUsecase_Expecter) Login(ctx interface{}, req interface{}) *MockIUserUsecase_Login_Call {
	return &MockIUserUsecase_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockIUserUsecase_Login_Call) Run(run func(ctx context.Context, req dto.LoginUserRequest)) *MockIUserUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.LoginUserRequest
		if args[1] != nil {
			arg1 = args[1].(dto.LoginUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_Login_Call) Return(loginUserResponse *dto.LoginUserResponse, err error) *MockIUserUsecase_Login_Call {
	_c.Call.Return(loginUserResponse, err)
	return _c
}

func (_c *MockIUserUsecase_Login_Call) RunAndReturn(run func(ctx context.Context, req dto.LoginUserRequest) (*dto.LoginUserResponse, error)) *MockIUserUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}
