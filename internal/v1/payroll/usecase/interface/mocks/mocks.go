// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase_interface_test

import (
	"context"

	"github.com/kadekchresna/payroll/internal/v1/payroll/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIPayrollUsecase creates a new instance of MockIPayrollUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPayrollUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPayrollUsecase {
	mock := &MockIPayrollUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIPayrollUsecase is an autogenerated mock type for the IPayrollUsecase type
type MockIPayrollUsecase struct {
	mock.Mock
}

type MockIPayrollUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPayrollUsecase) EXPECT() *MockIPayrollUsecase_Expecter {
	return &MockIPayrollUsecase_Expecter{mock: &_m.Mock}
}

// CreatePayroll provides a mock function for the type MockIPayrollUsecase
func (_mock *MockIPayrollUsecase) CreatePayroll(ctx context.Context, req dto.CreatePayrollRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayroll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreatePayrollRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPayrollUsecase_CreatePayroll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayroll'
type MockIPayrollUsecase_CreatePayroll_Call struct {
	*mock.Call
}

// CreatePayroll is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.CreatePayrollRequest
func (_e *MockIPayrollUsecase_Expecter) CreatePayroll(ctx interface{}, req interface{}) *MockIPayrollUsecase_CreatePayroll_Call {
	return &MockIPayrollUsecase_CreatePayroll_Call{Call: _e.mock.On("CreatePayroll", ctx, req)}
}

func (_c *MockIPayrollUsecase_CreatePayroll_Call) Run(run func(ctx context.Context, req dto.CreatePayrollRequest)) *MockIPayrollUsecase_CreatePayroll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.CreatePayrollRequest
		if args[1] != nil {
			arg1 = args[1].(dto.CreatePayrollRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPayrollUsecase_CreatePayroll_Call) Return(err error) *MockIPayrollUsecase_CreatePayroll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPayrollUsecase_CreatePayroll_Call) RunAndReturn(run func(ctx context.Context, req dto.CreatePayrollRequest) error) *MockIPayrollUsecase_CreatePayroll_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayrollByID provides a mock function for the type MockIPayrollUsecase
func (_mock *MockIPayrollUsecase) GetPayrollByID(ctx context.Context, req *dto.GetEmployeePayrollRequest) (*dto.GetEmployeePayrollResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPayrollByID")
	}

	var r0 *dto.GetEmployeePayrollResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.GetEmployeePayrollRequest) (*dto.GetEmployeePayrollResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.GetEmployeePayrollRequest) *dto.GetEmployeePayrollResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetEmployeePayrollResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.GetEmployeePayrollRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPayrollUsecase_GetPayrollByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayrollByID'
type MockIPayrollUsecase_GetPayrollByID_Call struct {
	*mock.Call
}

// GetPayrollByID is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.GetEmployeePayrollRequest
func (_e *MockIPayrollUsecase_Expecter) GetPayrollByID(ctx interface{}, req interface{}) *MockIPayrollUsecase_GetPayrollByID_Call {
	return &MockIPayrollUsecase_GetPayrollByID_Call{Call: _e.mock.On("GetPayrollByID", ctx, req)}
}

func (_c *MockIPayrollUsecase_GetPayrollByID_Call) Run(run func(ctx context.Context, req *dto.GetEmployeePayrollRequest)) *MockIPayrollUsecase_GetPayrollByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.GetEmployeePayrollRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.GetEmployeePayrollRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPayrollUsecase_GetPayrollByID_Call) Return(getEmployeePayrollResponse *dto.GetEmployeePayrollResponse, err error) *MockIPayrollUsecase_GetPayrollByID_Call {
	_c.Call.Return(getEmployeePayrollResponse, err)
	return _c
}

func (_c *MockIPayrollUsecase_GetPayrollByID_Call) RunAndReturn(run func(ctx context.Context, req *dto.GetEmployeePayrollRequest) (*dto.GetEmployeePayrollResponse, error)) *MockIPayrollUsecase_GetPayrollByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayrollSummary provides a mock function for the type MockIPayrollUsecase
func (_mock *MockIPayrollUsecase) GetPayrollSummary(ctx context.Context) (*dto.GetPayrollSummary, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPayrollSummary")
	}

	var r0 *dto.GetPayrollSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*dto.GetPayrollSummary, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *dto.GetPayrollSummary); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetPayrollSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPayrollUsecase_GetPayrollSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayrollSummary'
type MockIPayrollUsecase_GetPayrollSummary_Call struct {
	*mock.Call
}

// GetPayrollSummary is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPayrollUsecase_Expecter) GetPayrollSummary(ctx interface{}) *MockIPayrollUsecase_GetPayrollSummary_Call {
	return &MockIPayrollUsecase_GetPayrollSummary_Call{Call: _e.mock.On("GetPayrollSummary", ctx)}
}

func (_c *MockIPayrollUsecase_GetPayrollSummary_Call) Run(run func(ctx context.Context)) *MockIPayrollUsecase_GetPayrollSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPayrollUsecase_GetPayrollSummary_Call) Return(getPayrollSummary *dto.GetPayrollSummary, err error) *MockIPayrollUsecase_GetPayrollSummary_Call {
	_c.Call.Return(getPayrollSummary, err)
	return _c
}

func (_c *MockIPayrollUsecase_GetPayrollSummary_Call) RunAndReturn(run func(ctx context.Context) (*dto.GetPayrollSummary, error)) *MockIPayrollUsecase_GetPayrollSummary_Call {
	_c.Call.Return(run)
	return _c
}
