// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase_interface_test

import (
	"context"

	"github.com/kadekchresna/payroll/internal/v1/attendance/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIAttendanceUsecase creates a new instance of MockIAttendanceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAttendanceUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAttendanceUsecase {
	mock := &MockIAttendanceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAttendanceUsecase is an autogenerated mock type for the IAttendanceUsecase type
type MockIAttendanceUsecase struct {
	mock.Mock
}

type MockIAttendanceUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAttendanceUsecase) EXPECT() *MockIAttendanceUsecase_Expecter {
	return &MockIAttendanceUsecase_Expecter{mock: &_m.Mock}
}

// CreateAttendance provides a mock function for the type MockIAttendanceUsecase
func (_mock *MockIAttendanceUsecase) CreateAttendance(ctx context.Context, req *dto.CreateAttendanceRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateAttendanceRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAttendanceUsecase_CreateAttendance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttendance'
type MockIAttendanceUsecase_CreateAttendance_Call struct {
	*mock.Call
}

// CreateAttendance is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateAttendanceRequest
func (_e *MockIAttendanceUsecase_Expecter) CreateAttendance(ctx interface{}, req interface{}) *MockIAttendanceUsecase_CreateAttendance_Call {
	return &MockIAttendanceUsecase_CreateAttendance_Call{Call: _e.mock.On("CreateAttendance", ctx, req)}
}

func (_c *MockIAttendanceUsecase_CreateAttendance_Call) Run(run func(ctx context.Context, req *dto.CreateAttendanceRequest)) *MockIAttendanceUsecase_CreateAttendance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CreateAttendanceRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CreateAttendanceRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendanceUsecase_CreateAttendance_Call) Return(err error) *MockIAttendanceUsecase_CreateAttendance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAttendanceUsecase_CreateAttendance_Call) RunAndReturn(run func(ctx context.Context, req *dto.CreateAttendanceRequest) error) *MockIAttendanceUsecase_CreateAttendance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAttendancePeriodUsecase creates a new instance of MockIAttendancePeriodUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAttendancePeriodUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAttendancePeriodUsecase {
	mock := &MockIAttendancePeriodUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAttendancePeriodUsecase is an autogenerated mock type for the IAttendancePeriodUsecase type
type MockIAttendancePeriodUsecase struct {
	mock.Mock
}

type MockIAttendancePeriodUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAttendancePeriodUsecase) EXPECT() *MockIAttendancePeriodUsecase_Expecter {
	return &MockIAttendancePeriodUsecase_Expecter{mock: &_m.Mock}
}

// CreateAttendancePeriod provides a mock function for the type MockIAttendancePeriodUsecase
func (_mock *MockIAttendancePeriodUsecase) CreateAttendancePeriod(ctx context.Context, req *dto.CreateAttendancePeriodRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendancePeriod")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateAttendancePeriodRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttendancePeriod'
type MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call struct {
	*mock.Call
}

// CreateAttendancePeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateAttendancePeriodRequest
func (_e *MockIAttendancePeriodUsecase_Expecter) CreateAttendancePeriod(ctx interface{}, req interface{}) *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call {
	return &MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call{Call: _e.mock.On("CreateAttendancePeriod", ctx, req)}
}

func (_c *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call) Run(run func(ctx context.Context, req *dto.CreateAttendancePeriodRequest)) *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CreateAttendancePeriodRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CreateAttendancePeriodRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call) Return(err error) *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call) RunAndReturn(run func(ctx context.Context, req *dto.CreateAttendancePeriodRequest) error) *MockIAttendancePeriodUsecase_CreateAttendancePeriod_Call {
	_c.Call.Return(run)
	return _c
}
