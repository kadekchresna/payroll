// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_interface_test

import (
	"context"
	"time"

	"github.com/kadekchresna/payroll/internal/v1/attendance/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIAttendanceRepository creates a new instance of MockIAttendanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAttendanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAttendanceRepository {
	mock := &MockIAttendanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAttendanceRepository is an autogenerated mock type for the IAttendanceRepository type
type MockIAttendanceRepository struct {
	mock.Mock
}

type MockIAttendanceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAttendanceRepository) EXPECT() *MockIAttendanceRepository_Expecter {
	return &MockIAttendanceRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIAttendanceRepository
func (_mock *MockIAttendanceRepository) Create(ctx context.Context, a *model.Attendance) (int, error) {
	ret := _mock.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Attendance) (int, error)); ok {
		return returnFunc(ctx, a)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Attendance) int); ok {
		r0 = returnFunc(ctx, a)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Attendance) error); ok {
		r1 = returnFunc(ctx, a)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendanceRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIAttendanceRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - a *model.Attendance
func (_e *MockIAttendanceRepository_Expecter) Create(ctx interface{}, a interface{}) *MockIAttendanceRepository_Create_Call {
	return &MockIAttendanceRepository_Create_Call{Call: _e.mock.On("Create", ctx, a)}
}

func (_c *MockIAttendanceRepository_Create_Call) Run(run func(ctx context.Context, a *model.Attendance)) *MockIAttendanceRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Attendance
		if args[1] != nil {
			arg1 = args[1].(*model.Attendance)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendanceRepository_Create_Call) Return(n int, err error) *MockIAttendanceRepository_Create_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIAttendanceRepository_Create_Call) RunAndReturn(run func(ctx context.Context, a *model.Attendance) (int, error)) *MockIAttendanceRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateAndEmployeeID provides a mock function for the type MockIAttendanceRepository
func (_mock *MockIAttendanceRepository) GetByDateAndEmployeeID(ctx context.Context, employeeID int, date time.Time) (*model.Attendance, error) {
	ret := _mock.Called(ctx, employeeID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateAndEmployeeID")
	}

	var r0 *model.Attendance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, time.Time) (*model.Attendance, error)); ok {
		return returnFunc(ctx, employeeID, date)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, time.Time) *model.Attendance); ok {
		r0 = returnFunc(ctx, employeeID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attendance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, time.Time) error); ok {
		r1 = returnFunc(ctx, employeeID, date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendanceRepository_GetByDateAndEmployeeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateAndEmployeeID'
type MockIAttendanceRepository_GetByDateAndEmployeeID_Call struct {
	*mock.Call
}

// GetByDateAndEmployeeID is a helper method to define mock.On call
//   - ctx context.Context
//   - employeeID int
//   - date time.Time
func (_e *MockIAttendanceRepository_Expecter) GetByDateAndEmployeeID(ctx interface{}, employeeID interface{}, date interface{}) *MockIAttendanceRepository_GetByDateAndEmployeeID_Call {
	return &MockIAttendanceRepository_GetByDateAndEmployeeID_Call{Call: _e.mock.On("GetByDateAndEmployeeID", ctx, employeeID, date)}
}

func (_c *MockIAttendanceRepository_GetByDateAndEmployeeID_Call) Run(run func(ctx context.Context, employeeID int, date time.Time)) *MockIAttendanceRepository_GetByDateAndEmployeeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetByDateAndEmployeeID_Call) Return(attendance *model.Attendance, err error) *MockIAttendanceRepository_GetByDateAndEmployeeID_Call {
	_c.Call.Return(attendance, err)
	return _c
}

func (_c *MockIAttendanceRepository_GetByDateAndEmployeeID_Call) RunAndReturn(run func(ctx context.Context, employeeID int, date time.Time) (*model.Attendance, error)) *MockIAttendanceRepository_GetByDateAndEmployeeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIAttendanceRepository
func (_mock *MockIAttendanceRepository) GetByID(ctx context.Context, id int) (*model.Attendance, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Attendance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*model.Attendance, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *model.Attendance); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attendance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendanceRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIAttendanceRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockIAttendanceRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIAttendanceRepository_GetByID_Call {
	return &MockIAttendanceRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIAttendanceRepository_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockIAttendanceRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetByID_Call) Return(attendance *model.Attendance, err error) *MockIAttendanceRepository_GetByID_Call {
	_c.Call.Return(attendance, err)
	return _c
}

func (_c *MockIAttendanceRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*model.Attendance, error)) *MockIAttendanceRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployeeCountByDateRange provides a mock function for the type MockIAttendanceRepository
func (_mock *MockIAttendanceRepository) GetEmployeeCountByDateRange(ctx context.Context, periodStart time.Time, periodEnd time.Time) ([]*model.EmployeeAttendanceCount, error) {
	ret := _mock.Called(ctx, periodStart, periodEnd)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeCountByDateRange")
	}

	var r0 []*model.EmployeeAttendanceCount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]*model.EmployeeAttendanceCount, error)); ok {
		return returnFunc(ctx, periodStart, periodEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []*model.EmployeeAttendanceCount); ok {
		r0 = returnFunc(ctx, periodStart, periodEnd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EmployeeAttendanceCount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, periodStart, periodEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendanceRepository_GetEmployeeCountByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployeeCountByDateRange'
type MockIAttendanceRepository_GetEmployeeCountByDateRange_Call struct {
	*mock.Call
}

// GetEmployeeCountByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - periodStart time.Time
//   - periodEnd time.Time
func (_e *MockIAttendanceRepository_Expecter) GetEmployeeCountByDateRange(ctx interface{}, periodStart interface{}, periodEnd interface{}) *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call {
	return &MockIAttendanceRepository_GetEmployeeCountByDateRange_Call{Call: _e.mock.On("GetEmployeeCountByDateRange", ctx, periodStart, periodEnd)}
}

func (_c *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call) Run(run func(ctx context.Context, periodStart time.Time, periodEnd time.Time)) *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call) Return(employeeAttendanceCounts []*model.EmployeeAttendanceCount, err error) *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call {
	_c.Call.Return(employeeAttendanceCounts, err)
	return _c
}

func (_c *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call) RunAndReturn(run func(ctx context.Context, periodStart time.Time, periodEnd time.Time) ([]*model.EmployeeAttendanceCount, error)) *MockIAttendanceRepository_GetEmployeeCountByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAttendancePeriodRepository creates a new instance of MockIAttendancePeriodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAttendancePeriodRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAttendancePeriodRepository {
	mock := &MockIAttendancePeriodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAttendancePeriodRepository is an autogenerated mock type for the IAttendancePeriodRepository type
type MockIAttendancePeriodRepository struct {
	mock.Mock
}

type MockIAttendancePeriodRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAttendancePeriodRepository) EXPECT() *MockIAttendancePeriodRepository_Expecter {
	return &MockIAttendancePeriodRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIAttendancePeriodRepository
func (_mock *MockIAttendancePeriodRepository) Create(ctx context.Context, p *model.AttendancePeriod) (int, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.AttendancePeriod) (int, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.AttendancePeriod) int); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.AttendancePeriod) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendancePeriodRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIAttendancePeriodRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - p *model.AttendancePeriod
func (_e *MockIAttendancePeriodRepository_Expecter) Create(ctx interface{}, p interface{}) *MockIAttendancePeriodRepository_Create_Call {
	return &MockIAttendancePeriodRepository_Create_Call{Call: _e.mock.On("Create", ctx, p)}
}

func (_c *MockIAttendancePeriodRepository_Create_Call) Run(run func(ctx context.Context, p *model.AttendancePeriod)) *MockIAttendancePeriodRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.AttendancePeriod
		if args[1] != nil {
			arg1 = args[1].(*model.AttendancePeriod)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendancePeriodRepository_Create_Call) Return(n int, err error) *MockIAttendancePeriodRepository_Create_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIAttendancePeriodRepository_Create_Call) RunAndReturn(run func(ctx context.Context, p *model.AttendancePeriod) (int, error)) *MockIAttendancePeriodRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIAttendancePeriodRepository
func (_mock *MockIAttendancePeriodRepository) GetByID(ctx context.Context, id int) (*model.AttendancePeriod, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.AttendancePeriod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*model.AttendancePeriod, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *model.AttendancePeriod); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttendancePeriod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendancePeriodRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIAttendancePeriodRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockIAttendancePeriodRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIAttendancePeriodRepository_GetByID_Call {
	return &MockIAttendancePeriodRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIAttendancePeriodRepository_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockIAttendancePeriodRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendancePeriodRepository_GetByID_Call) Return(attendancePeriod *model.AttendancePeriod, err error) *MockIAttendancePeriodRepository_GetByID_Call {
	_c.Call.Return(attendancePeriod, err)
	return _c
}

func (_c *MockIAttendancePeriodRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*model.AttendancePeriod, error)) *MockIAttendancePeriodRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPeriodIntersect provides a mock function for the type MockIAttendancePeriodRepository
func (_mock *MockIAttendancePeriodRepository) GetByPeriodIntersect(ctx context.Context, periodStart time.Time, periodEnd time.Time) (*model.AttendancePeriod, error) {
	ret := _mock.Called(ctx, periodStart, periodEnd)

	if len(ret) == 0 {
		panic("no return value specified for GetByPeriodIntersect")
	}

	var r0 *model.AttendancePeriod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) (*model.AttendancePeriod, error)); ok {
		return returnFunc(ctx, periodStart, periodEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) *model.AttendancePeriod); ok {
		r0 = returnFunc(ctx, periodStart, periodEnd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttendancePeriod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, periodStart, periodEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAttendancePeriodRepository_GetByPeriodIntersect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPeriodIntersect'
type MockIAttendancePeriodRepository_GetByPeriodIntersect_Call struct {
	*mock.Call
}

// GetByPeriodIntersect is a helper method to define mock.On call
//   - ctx context.Context
//   - periodStart time.Time
//   - periodEnd time.Time
func (_e *MockIAttendancePeriodRepository_Expecter) GetByPeriodIntersect(ctx interface{}, periodStart interface{}, periodEnd interface{}) *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call {
	return &MockIAttendancePeriodRepository_GetByPeriodIntersect_Call{Call: _e.mock.On("GetByPeriodIntersect", ctx, periodStart, periodEnd)}
}

func (_c *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call) Run(run func(ctx context.Context, periodStart time.Time, periodEnd time.Time)) *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call) Return(attendancePeriod *model.AttendancePeriod, err error) *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call {
	_c.Call.Return(attendancePeriod, err)
	return _c
}

func (_c *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call) RunAndReturn(run func(ctx context.Context, periodStart time.Time, periodEnd time.Time) (*model.AttendancePeriod, error)) *MockIAttendancePeriodRepository_GetByPeriodIntersect_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeriod provides a mock function for the type MockIAttendancePeriodRepository
func (_mock *MockIAttendancePeriodRepository) UpdatePeriod(ctx context.Context, ap *model.AttendancePeriod) error {
	ret := _mock.Called(ctx, ap)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeriod")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.AttendancePeriod) error); ok {
		r0 = returnFunc(ctx, ap)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAttendancePeriodRepository_UpdatePeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeriod'
type MockIAttendancePeriodRepository_UpdatePeriod_Call struct {
	*mock.Call
}

// UpdatePeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - ap *model.AttendancePeriod
func (_e *MockIAttendancePeriodRepository_Expecter) UpdatePeriod(ctx interface{}, ap interface{}) *MockIAttendancePeriodRepository_UpdatePeriod_Call {
	return &MockIAttendancePeriodRepository_UpdatePeriod_Call{Call: _e.mock.On("UpdatePeriod", ctx, ap)}
}

func (_c *MockIAttendancePeriodRepository_UpdatePeriod_Call) Run(run func(ctx context.Context, ap *model.AttendancePeriod)) *MockIAttendancePeriodRepository_UpdatePeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.AttendancePeriod
		if args[1] != nil {
			arg1 = args[1].(*model.AttendancePeriod)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAttendancePeriodRepository_UpdatePeriod_Call) Return(err error) *MockIAttendancePeriodRepository_UpdatePeriod_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAttendancePeriodRepository_UpdatePeriod_Call) RunAndReturn(run func(ctx context.Context, ap *model.AttendancePeriod) error) *MockIAttendancePeriodRepository_UpdatePeriod_Call {
	_c.Call.Return(run)
	return _c
}
