// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase_interface_test

import (
	"context"

	"github.com/kadekchresna/payroll/internal/v1/compensation/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIOvertimeUsecase creates a new instance of MockIOvertimeUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOvertimeUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOvertimeUsecase {
	mock := &MockIOvertimeUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOvertimeUsecase is an autogenerated mock type for the IOvertimeUsecase type
type MockIOvertimeUsecase struct {
	mock.Mock
}

type MockIOvertimeUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOvertimeUsecase) EXPECT() *MockIOvertimeUsecase_Expecter {
	return &MockIOvertimeUsecase_Expecter{mock: &_m.Mock}
}

// CreateOvertime provides a mock function for the type MockIOvertimeUsecase
func (_mock *MockIOvertimeUsecase) CreateOvertime(ctx context.Context, req *dto.CreateOvertimeRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOvertime")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateOvertimeRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOvertimeUsecase_CreateOvertime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOvertime'
type MockIOvertimeUsecase_CreateOvertime_Call struct {
	*mock.Call
}

// CreateOvertime is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateOvertimeRequest
func (_e *MockIOvertimeUsecase_Expecter) CreateOvertime(ctx interface{}, req interface{}) *MockIOvertimeUsecase_CreateOvertime_Call {
	return &MockIOvertimeUsecase_CreateOvertime_Call{Call: _e.mock.On("CreateOvertime", ctx, req)}
}

func (_c *MockIOvertimeUsecase_CreateOvertime_Call) Run(run func(ctx context.Context, req *dto.CreateOvertimeRequest)) *MockIOvertimeUsecase_CreateOvertime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CreateOvertimeRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CreateOvertimeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOvertimeUsecase_CreateOvertime_Call) Return(err error) *MockIOvertimeUsecase_CreateOvertime_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOvertimeUsecase_CreateOvertime_Call) RunAndReturn(run func(ctx context.Context, req *dto.CreateOvertimeRequest) error) *MockIOvertimeUsecase_CreateOvertime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIReimbursementUsecase creates a new instance of MockIReimbursementUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIReimbursementUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIReimbursementUsecase {
	mock := &MockIReimbursementUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIReimbursementUsecase is an autogenerated mock type for the IReimbursementUsecase type
type MockIReimbursementUsecase struct {
	mock.Mock
}

type MockIReimbursementUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIReimbursementUsecase) EXPECT() *MockIReimbursementUsecase_Expecter {
	return &MockIReimbursementUsecase_Expecter{mock: &_m.Mock}
}

// CreateReimbursement provides a mock function for the type MockIReimbursementUsecase
func (_mock *MockIReimbursementUsecase) CreateReimbursement(ctx context.Context, req *dto.CreateReimbursementRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateReimbursement")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.CreateReimbursementRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIReimbursementUsecase_CreateReimbursement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReimbursement'
type MockIReimbursementUsecase_CreateReimbursement_Call struct {
	*mock.Call
}

// CreateReimbursement is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateReimbursementRequest
func (_e *MockIReimbursementUsecase_Expecter) CreateReimbursement(ctx interface{}, req interface{}) *MockIReimbursementUsecase_CreateReimbursement_Call {
	return &MockIReimbursementUsecase_CreateReimbursement_Call{Call: _e.mock.On("CreateReimbursement", ctx, req)}
}

func (_c *MockIReimbursementUsecase_CreateReimbursement_Call) Run(run func(ctx context.Context, req *dto.CreateReimbursementRequest)) *MockIReimbursementUsecase_CreateReimbursement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.CreateReimbursementRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.CreateReimbursementRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIReimbursementUsecase_CreateReimbursement_Call) Return(err error) *MockIReimbursementUsecase_CreateReimbursement_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIReimbursementUsecase_CreateReimbursement_Call) RunAndReturn(run func(ctx context.Context, req *dto.CreateReimbursementRequest) error) *MockIReimbursementUsecase_CreateReimbursement_Call {
	_c.Call.Return(run)
	return _c
}
