// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_interface_test

import (
	"context"
	"time"

	"github.com/kadekchresna/payroll/internal/v1/compensation/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIOvertimeRepository creates a new instance of MockIOvertimeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOvertimeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOvertimeRepository {
	mock := &MockIOvertimeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOvertimeRepository is an autogenerated mock type for the IOvertimeRepository type
type MockIOvertimeRepository struct {
	mock.Mock
}

type MockIOvertimeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOvertimeRepository) EXPECT() *MockIOvertimeRepository_Expecter {
	return &MockIOvertimeRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIOvertimeRepository
func (_mock *MockIOvertimeRepository) Create(ctx context.Context, ot *model.Overtime) (int, error) {
	ret := _mock.Called(ctx, ot)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Overtime) (int, error)); ok {
		return returnFunc(ctx, ot)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Overtime) int); ok {
		r0 = returnFunc(ctx, ot)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Overtime) error); ok {
		r1 = returnFunc(ctx, ot)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOvertimeRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIOvertimeRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - ot *model.Overtime
func (_e *MockIOvertimeRepository_Expecter) Create(ctx interface{}, ot interface{}) *MockIOvertimeRepository_Create_Call {
	return &MockIOvertimeRepository_Create_Call{Call: _e.mock.On("Create", ctx, ot)}
}

func (_c *MockIOvertimeRepository_Create_Call) Run(run func(ctx context.Context, ot *model.Overtime)) *MockIOvertimeRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Overtime
		if args[1] != nil {
			arg1 = args[1].(*model.Overtime)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOvertimeRepository_Create_Call) Return(n int, err error) *MockIOvertimeRepository_Create_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIOvertimeRepository_Create_Call) RunAndReturn(run func(ctx context.Context, ot *model.Overtime) (int, error)) *MockIOvertimeRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateAndEmployeeID provides a mock function for the type MockIOvertimeRepository
func (_mock *MockIOvertimeRepository) GetByDateAndEmployeeID(ctx context.Context, employeeID int, date time.Time) ([]model.Overtime, error) {
	ret := _mock.Called(ctx, employeeID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateAndEmployeeID")
	}

	var r0 []model.Overtime
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, time.Time) ([]model.Overtime, error)); ok {
		return returnFunc(ctx, employeeID, date)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, time.Time) []model.Overtime); ok {
		r0 = returnFunc(ctx, employeeID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Overtime)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, time.Time) error); ok {
		r1 = returnFunc(ctx, employeeID, date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOvertimeRepository_GetByDateAndEmployeeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateAndEmployeeID'
type MockIOvertimeRepository_GetByDateAndEmployeeID_Call struct {
	*mock.Call
}

// GetByDateAndEmployeeID is a helper method to define mock.On call
//   - ctx context.Context
//   - employeeID int
//   - date time.Time
func (_e *MockIOvertimeRepository_Expecter) GetByDateAndEmployeeID(ctx interface{}, employeeID interface{}, date interface{}) *MockIOvertimeRepository_GetByDateAndEmployeeID_Call {
	return &MockIOvertimeRepository_GetByDateAndEmployeeID_Call{Call: _e.mock.On("GetByDateAndEmployeeID", ctx, employeeID, date)}
}

func (_c *MockIOvertimeRepository_GetByDateAndEmployeeID_Call) Run(run func(ctx context.Context, employeeID int, date time.Time)) *MockIOvertimeRepository_GetByDateAndEmployeeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOvertimeRepository_GetByDateAndEmployeeID_Call) Return(overtimes []model.Overtime, err error) *MockIOvertimeRepository_GetByDateAndEmployeeID_Call {
	_c.Call.Return(overtimes, err)
	return _c
}

func (_c *MockIOvertimeRepository_GetByDateAndEmployeeID_Call) RunAndReturn(run func(ctx context.Context, employeeID int, date time.Time) ([]model.Overtime, error)) *MockIOvertimeRepository_GetByDateAndEmployeeID_Call {
	_c.Call.Return(run)
	return _c
}

// SumOvertimeByDateRange provides a mock function for the type MockIOvertimeRepository
func (_mock *MockIOvertimeRepository) SumOvertimeByDateRange(ctx context.Context, startDate time.Time, endDate time.Time) ([]*model.EmployeeOvertimeSummary, error) {
	ret := _mock.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for SumOvertimeByDateRange")
	}

	var r0 []*model.EmployeeOvertimeSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]*model.EmployeeOvertimeSummary, error)); ok {
		return returnFunc(ctx, startDate, endDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []*model.EmployeeOvertimeSummary); ok {
		r0 = returnFunc(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EmployeeOvertimeSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOvertimeRepository_SumOvertimeByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SumOvertimeByDateRange'
type MockIOvertimeRepository_SumOvertimeByDateRange_Call struct {
	*mock.Call
}

// SumOvertimeByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate time.Time
//   - endDate time.Time
func (_e *MockIOvertimeRepository_Expecter) SumOvertimeByDateRange(ctx interface{}, startDate interface{}, endDate interface{}) *MockIOvertimeRepository_SumOvertimeByDateRange_Call {
	return &MockIOvertimeRepository_SumOvertimeByDateRange_Call{Call: _e.mock.On("SumOvertimeByDateRange", ctx, startDate, endDate)}
}

func (_c *MockIOvertimeRepository_SumOvertimeByDateRange_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time)) *MockIOvertimeRepository_SumOvertimeByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOvertimeRepository_SumOvertimeByDateRange_Call) Return(employeeOvertimeSummarys []*model.EmployeeOvertimeSummary, err error) *MockIOvertimeRepository_SumOvertimeByDateRange_Call {
	_c.Call.Return(employeeOvertimeSummarys, err)
	return _c
}

func (_c *MockIOvertimeRepository_SumOvertimeByDateRange_Call) RunAndReturn(run func(ctx context.Context, startDate time.Time, endDate time.Time) ([]*model.EmployeeOvertimeSummary, error)) *MockIOvertimeRepository_SumOvertimeByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIReimbursementRepository creates a new instance of MockIReimbursementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIReimbursementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIReimbursementRepository {
	mock := &MockIReimbursementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIReimbursementRepository is an autogenerated mock type for the IReimbursementRepository type
type MockIReimbursementRepository struct {
	mock.Mock
}

type MockIReimbursementRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIReimbursementRepository) EXPECT() *MockIReimbursementRepository_Expecter {
	return &MockIReimbursementRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) Create(ctx context.Context, m *model.Reimbursement) (int, error) {
	ret := _mock.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Reimbursement) (int, error)); ok {
		return returnFunc(ctx, m)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Reimbursement) int); ok {
		r0 = returnFunc(ctx, m)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Reimbursement) error); ok {
		r1 = returnFunc(ctx, m)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIReimbursementRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIReimbursementRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - m *model.Reimbursement
func (_e *MockIReimbursementRepository_Expecter) Create(ctx interface{}, m interface{}) *MockIReimbursementRepository_Create_Call {
	return &MockIReimbursementRepository_Create_Call{Call: _e.mock.On("Create", ctx, m)}
}

func (_c *MockIReimbursementRepository_Create_Call) Run(run func(ctx context.Context, m *model.Reimbursement)) *MockIReimbursementRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Reimbursement
		if args[1] != nil {
			arg1 = args[1].(*model.Reimbursement)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_Create_Call) Return(n int, err error) *MockIReimbursementRepository_Create_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIReimbursementRepository_Create_Call) RunAndReturn(run func(ctx context.Context, m *model.Reimbursement) (int, error)) *MockIReimbursementRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateRange provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) GetByDateRange(ctx context.Context, startDate time.Time, endDate time.Time) ([]model.Reimbursement, error) {
	ret := _mock.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateRange")
	}

	var r0 []model.Reimbursement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]model.Reimbursement, error)); ok {
		return returnFunc(ctx, startDate, endDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []model.Reimbursement); ok {
		r0 = returnFunc(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reimbursement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIReimbursementRepository_GetByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateRange'
type MockIReimbursementRepository_GetByDateRange_Call struct {
	*mock.Call
}

// GetByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate time.Time
//   - endDate time.Time
func (_e *MockIReimbursementRepository_Expecter) GetByDateRange(ctx interface{}, startDate interface{}, endDate interface{}) *MockIReimbursementRepository_GetByDateRange_Call {
	return &MockIReimbursementRepository_GetByDateRange_Call{Call: _e.mock.On("GetByDateRange", ctx, startDate, endDate)}
}

func (_c *MockIReimbursementRepository_GetByDateRange_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time)) *MockIReimbursementRepository_GetByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_GetByDateRange_Call) Return(reimbursements []model.Reimbursement, err error) *MockIReimbursementRepository_GetByDateRange_Call {
	_c.Call.Return(reimbursements, err)
	return _c
}

func (_c *MockIReimbursementRepository_GetByDateRange_Call) RunAndReturn(run func(ctx context.Context, startDate time.Time, endDate time.Time) ([]model.Reimbursement, error)) *MockIReimbursementRepository_GetByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) GetByIDs(ctx context.Context, id []int) ([]model.Reimbursement, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []model.Reimbursement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int) ([]model.Reimbursement, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int) []model.Reimbursement); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reimbursement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIReimbursementRepository_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type MockIReimbursementRepository_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - id []int
func (_e *MockIReimbursementRepository_Expecter) GetByIDs(ctx interface{}, id interface{}) *MockIReimbursementRepository_GetByIDs_Call {
	return &MockIReimbursementRepository_GetByIDs_Call{Call: _e.mock.On("GetByIDs", ctx, id)}
}

func (_c *MockIReimbursementRepository_GetByIDs_Call) Run(run func(ctx context.Context, id []int)) *MockIReimbursementRepository_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int
		if args[1] != nil {
			arg1 = args[1].([]int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_GetByIDs_Call) Return(reimbursements []model.Reimbursement, err error) *MockIReimbursementRepository_GetByIDs_Call {
	_c.Call.Return(reimbursements, err)
	return _c
}

func (_c *MockIReimbursementRepository_GetByIDs_Call) RunAndReturn(run func(ctx context.Context, id []int) ([]model.Reimbursement, error)) *MockIReimbursementRepository_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPayslipID provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) GetByPayslipID(ctx context.Context, payslipID int, employeeID int) ([]model.Reimbursement, error) {
	ret := _mock.Called(ctx, payslipID, employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPayslipID")
	}

	var r0 []model.Reimbursement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]model.Reimbursement, error)); ok {
		return returnFunc(ctx, payslipID, employeeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []model.Reimbursement); ok {
		r0 = returnFunc(ctx, payslipID, employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reimbursement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, payslipID, employeeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIReimbursementRepository_GetByPayslipID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPayslipID'
type MockIReimbursementRepository_GetByPayslipID_Call struct {
	*mock.Call
}

// GetByPayslipID is a helper method to define mock.On call
//   - ctx context.Context
//   - payslipID int
//   - employeeID int
func (_e *MockIReimbursementRepository_Expecter) GetByPayslipID(ctx interface{}, payslipID interface{}, employeeID interface{}) *MockIReimbursementRepository_GetByPayslipID_Call {
	return &MockIReimbursementRepository_GetByPayslipID_Call{Call: _e.mock.On("GetByPayslipID", ctx, payslipID, employeeID)}
}

func (_c *MockIReimbursementRepository_GetByPayslipID_Call) Run(run func(ctx context.Context, payslipID int, employeeID int)) *MockIReimbursementRepository_GetByPayslipID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_GetByPayslipID_Call) Return(reimbursements []model.Reimbursement, err error) *MockIReimbursementRepository_GetByPayslipID_Call {
	_c.Call.Return(reimbursements, err)
	return _c
}

func (_c *MockIReimbursementRepository_GetByPayslipID_Call) RunAndReturn(run func(ctx context.Context, payslipID int, employeeID int) ([]model.Reimbursement, error)) *MockIReimbursementRepository_GetByPayslipID_Call {
	_c.Call.Return(run)
	return _c
}

// SumReimbursementsByDateRange provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) SumReimbursementsByDateRange(ctx context.Context, startDate time.Time, endDate time.Time) ([]*model.EmployeeReimbursementSummary, error) {
	ret := _mock.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for SumReimbursementsByDateRange")
	}

	var r0 []*model.EmployeeReimbursementSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]*model.EmployeeReimbursementSummary, error)); ok {
		return returnFunc(ctx, startDate, endDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []*model.EmployeeReimbursementSummary); ok {
		r0 = returnFunc(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EmployeeReimbursementSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIReimbursementRepository_SumReimbursementsByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SumReimbursementsByDateRange'
type MockIReimbursementRepository_SumReimbursementsByDateRange_Call struct {
	*mock.Call
}

// SumReimbursementsByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate time.Time
//   - endDate time.Time
func (_e *MockIReimbursementRepository_Expecter) SumReimbursementsByDateRange(ctx interface{}, startDate interface{}, endDate interface{}) *MockIReimbursementRepository_SumReimbursementsByDateRange_Call {
	return &MockIReimbursementRepository_SumReimbursementsByDateRange_Call{Call: _e.mock.On("SumReimbursementsByDateRange", ctx, startDate, endDate)}
}

func (_c *MockIReimbursementRepository_SumReimbursementsByDateRange_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time)) *MockIReimbursementRepository_SumReimbursementsByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_SumReimbursementsByDateRange_Call) Return(employeeReimbursementSummarys []*model.EmployeeReimbursementSummary, err error) *MockIReimbursementRepository_SumReimbursementsByDateRange_Call {
	_c.Call.Return(employeeReimbursementSummarys, err)
	return _c
}

func (_c *MockIReimbursementRepository_SumReimbursementsByDateRange_Call) RunAndReturn(run func(ctx context.Context, startDate time.Time, endDate time.Time) ([]*model.EmployeeReimbursementSummary, error)) *MockIReimbursementRepository_SumReimbursementsByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// SumReimbursementsByID provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) SumReimbursementsByID(ctx context.Context, id []int) ([]*model.EmployeeReimbursementSummary, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SumReimbursementsByID")
	}

	var r0 []*model.EmployeeReimbursementSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int) ([]*model.EmployeeReimbursementSummary, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int) []*model.EmployeeReimbursementSummary); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EmployeeReimbursementSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIReimbursementRepository_SumReimbursementsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SumReimbursementsByID'
type MockIReimbursementRepository_SumReimbursementsByID_Call struct {
	*mock.Call
}

// SumReimbursementsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id []int
func (_e *MockIReimbursementRepository_Expecter) SumReimbursementsByID(ctx interface{}, id interface{}) *MockIReimbursementRepository_SumReimbursementsByID_Call {
	return &MockIReimbursementRepository_SumReimbursementsByID_Call{Call: _e.mock.On("SumReimbursementsByID", ctx, id)}
}

func (_c *MockIReimbursementRepository_SumReimbursementsByID_Call) Run(run func(ctx context.Context, id []int)) *MockIReimbursementRepository_SumReimbursementsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int
		if args[1] != nil {
			arg1 = args[1].([]int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_SumReimbursementsByID_Call) Return(employeeReimbursementSummarys []*model.EmployeeReimbursementSummary, err error) *MockIReimbursementRepository_SumReimbursementsByID_Call {
	_c.Call.Return(employeeReimbursementSummarys, err)
	return _c
}

func (_c *MockIReimbursementRepository_SumReimbursementsByID_Call) RunAndReturn(run func(ctx context.Context, id []int) ([]*model.EmployeeReimbursementSummary, error)) *MockIReimbursementRepository_SumReimbursementsByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockIReimbursementRepository
func (_mock *MockIReimbursementRepository) Update(ctx context.Context, m *model.Reimbursement, ids []int) error {
	ret := _mock.Called(ctx, m, ids)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Reimbursement, []int) error); ok {
		r0 = returnFunc(ctx, m, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIReimbursementRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIReimbursementRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - m *model.Reimbursement
//   - ids []int
func (_e *MockIReimbursementRepository_Expecter) Update(ctx interface{}, m interface{}, ids interface{}) *MockIReimbursementRepository_Update_Call {
	return &MockIReimbursementRepository_Update_Call{Call: _e.mock.On("Update", ctx, m, ids)}
}

func (_c *MockIReimbursementRepository_Update_Call) Run(run func(ctx context.Context, m *model.Reimbursement, ids []int)) *MockIReimbursementRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Reimbursement
		if args[1] != nil {
			arg1 = args[1].(*model.Reimbursement)
		}
		var arg2 []int
		if args[2] != nil {
			arg2 = args[2].([]int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIReimbursementRepository_Update_Call) Return(err error) *MockIReimbursementRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIReimbursementRepository_Update_Call) RunAndReturn(run func(ctx context.Context, m *model.Reimbursement, ids []int) error) *MockIReimbursementRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
