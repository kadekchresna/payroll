// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository_interface_test

import (
	"context"

	"github.com/kadekchresna/payroll/internal/v1/audit/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIAuditRepository creates a new instance of MockIAuditRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuditRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuditRepository {
	mock := &MockIAuditRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAuditRepository is an autogenerated mock type for the IAuditRepository type
type MockIAuditRepository struct {
	mock.Mock
}

type MockIAuditRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuditRepository) EXPECT() *MockIAuditRepository_Expecter {
	return &MockIAuditRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIAuditRepository
func (_mock *MockIAuditRepository) Create(ctx context.Context, log model.AuditLog) error {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.AuditLog) error); ok {
		r0 = returnFunc(ctx, log)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAuditRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIAuditRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - log model.AuditLog
func (_e *MockIAuditRepository_Expecter) Create(ctx interface{}, log interface{}) *MockIAuditRepository_Create_Call {
	return &MockIAuditRepository_Create_Call{Call: _e.mock.On("Create", ctx, log)}
}

func (_c *MockIAuditRepository_Create_Call) Run(run func(ctx context.Context, log model.AuditLog)) *MockIAuditRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.AuditLog
		if args[1] != nil {
			arg1 = args[1].(model.AuditLog)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIAuditRepository_Create_Call) Return(err error) *MockIAuditRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAuditRepository_Create_Call) RunAndReturn(run func(ctx context.Context, log model.AuditLog) error) *MockIAuditRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}
